/* Generated By:JavaCC: Do not edit this line. JavascriptDefaultVisitor.java Version 7.0.5 */
package javascriptInterpreter.tree;

import javascriptInterpreter.parser.*;

public class JavascriptDefaultVisitor implements JavascriptVisitor{
  public javascriptInterpreter.visitors.JavascriptType defaultVisit(SimpleNode node, javascriptInterpreter.visitors.Context data){
    node.childrenAccept(this, data);
    return null;
  }
  public javascriptInterpreter.visitors.JavascriptType visit(SimpleNode node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTprimaryExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTliteral node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTarrayLiteral node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTellision node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTelementList node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTarrayElement node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTspreadElement node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTobjectLiteral node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTpropertyDefinition node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTfunctionExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTparenthesizedExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTleftSideExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTcallExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTarguments node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTnewExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTmemberExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTupdateExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTunaryExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTexponentiationExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTmultiplicativeExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTadditiveExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTshiftExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTrelationalExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTequalityExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTbitwiseAndExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTbitwiseXorExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTbitwiseOrExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTlogicalAndExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTlogicalOrExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTconditionalExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTassignmentExpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTexpression node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTstatement node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTemptyStatement node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTexpressionStatement node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTvariableDefinition node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTvariableDeclarationList node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTvariableDeclaration node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTblock node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTlabeledStatement node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTifStatement node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTswitchStatement node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTcaseBlock node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTcaseClauses node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTcaseClause node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTdefaultClause node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTdoStatement node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTwhileStatement node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTforStatement node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTforHeader node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTforInitializer node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTforInHeader node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTforInBinding node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTcontinueStatement node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTbreakStatement node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTreturnStatement node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTthrowStatement node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTtryStatement node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTcatchClauses node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTcatchClause node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTfinallyClause node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTnamedFunction node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTanonymousFunction node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTformalParameters node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTfunctionBody node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTtopStatement node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTtopStatements node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
  public javascriptInterpreter.visitors.JavascriptType visit(ASTprogram node, javascriptInterpreter.visitors.Context data){
    return defaultVisit(node, data);
  }
}
/* JavaCC - OriginalChecksum=c32a2945f685a9547f2a361613ea93b5 (do not edit this line) */
