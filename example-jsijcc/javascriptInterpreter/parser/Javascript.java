/* Javascript.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Javascript.java */
package javascriptInterpreter.parser;
import javascriptInterpreter.tree.*;


import java.io.*;
import javascriptInterpreter.visitors.*;

public class Javascript/*@bgen(jjtree)*/implements JavascriptTreeConstants, JavascriptConstants {/*@bgen(jjtree)*/
  protected static JJTJavascriptState jjtree = new JJTJavascriptState();
        public static boolean forIn = false;
        public static boolean isRelationalOperator(){
            String nextImage = getToken(1).image;
        switch(nextImage){
            case "in" : return !forIn;
            case "<" :
            case ">" :
            case "<=" :
            case ">=" :
            case "instanceof" : return true;
            default : return false;
        }
        }

  static final public void primaryExpression() throws ParseException {/*@bgen(jjtree) primaryExpression */
  ASTprimaryExpression jjtn000 = new ASTprimaryExpression(JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case THIS:{
        jj_consume_token(THIS);
        break;
        }
      case IDENTIFIER_NAME:{
        jj_consume_token(IDENTIFIER_NAME);
        break;
        }
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case NUMERIC_LITERAL:{
        literal();
        break;
        }
      case 57:{
        arrayLiteral();
        break;
        }
      case 61:{
        objectLiteral();
        break;
        }
      case FUNCTION:{
        functionExpression();
        break;
        }
      case 64:{
        parenthesizedExpression();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void literal() throws ParseException {/*@bgen(jjtree) literal */
  ASTliteral jjtn000 = new ASTliteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NULL_LITERAL:{
        jj_consume_token(NULL_LITERAL);
        break;
        }
      case BOOLEAN_LITERAL:{
        jj_consume_token(BOOLEAN_LITERAL);
        break;
        }
      case NUMERIC_LITERAL:{
        jj_consume_token(NUMERIC_LITERAL);
        break;
        }
      case STRING_LITERAL:{
        jj_consume_token(STRING_LITERAL);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void arrayLiteral() throws ParseException {/*@bgen(jjtree) arrayLiteral */
  ASTarrayLiteral jjtn000 = new ASTarrayLiteral(JJTARRAYLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 59:{
        ellision();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      if (jj_2_1(1)) {
        elementList();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 59:{
          ellision();
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          ;
        }
      } else {
        ;
      }
      jj_consume_token(58);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void ellision() throws ParseException {/*@bgen(jjtree) ellision */
  ASTellision jjtn000 = new ASTellision(JJTELLISION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_1:
      while (true) {
        jj_consume_token(59);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 59:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void elementList() throws ParseException {/*@bgen(jjtree) elementList */
  ASTelementList jjtn000 = new ASTelementList(JJTELEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      arrayElement();
      label_2:
      while (true) {
        if (jj_2_2(2147483647)) {
          ;
        } else {
          break label_2;
        }
        ellision();
        arrayElement();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void arrayElement() throws ParseException {/*@bgen(jjtree) arrayElement */
  ASTarrayElement jjtn000 = new ASTarrayElement(JJTARRAYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_3(1)) {
        assignmentExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 60:{
          spreadElement();
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void spreadElement() throws ParseException {/*@bgen(jjtree) spreadElement */
  ASTspreadElement jjtn000 = new ASTspreadElement(JJTSPREADELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(60);
      assignmentExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void objectLiteral() throws ParseException {/*@bgen(jjtree) objectLiteral */
  ASTobjectLiteral jjtn000 = new ASTobjectLiteral(JJTOBJECTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER_NAME:{
        propertyDefinitionList();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 59:{
        jj_consume_token(59);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(62);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void propertyDefinitionList() throws ParseException {
    propertyDefinition();
    label_3:
    while (true) {
      if (getToken(1).image.equals(",") && !getToken(2).image.equals("}")) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(59);
      propertyDefinition();
    }
}

  static final public void propertyDefinition() throws ParseException {/*@bgen(jjtree) propertyDefinition */
  ASTpropertyDefinition jjtn000 = new ASTpropertyDefinition(JJTPROPERTYDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IDENTIFIER_NAME);
      jj_consume_token(63);
      assignmentExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void functionExpression() throws ParseException {/*@bgen(jjtree) functionExpression */
  ASTfunctionExpression jjtn000 = new ASTfunctionExpression(JJTFUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_4(2)) {
        namedFunction();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FUNCTION:{
          anonymousFunction();
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void parenthesizedExpression() throws ParseException {/*@bgen(jjtree) parenthesizedExpression */
  ASTparenthesizedExpression jjtn000 = new ASTparenthesizedExpression(JJTPARENTHESIZEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(64);
      expression();
      jj_consume_token(65);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void leftSideExpression() throws ParseException {/*@bgen(jjtree) leftSideExpression */
  ASTleftSideExpression jjtn000 = new ASTleftSideExpression(JJTLEFTSIDEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (!getToken(1).image.equals("new")) {
        callExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FUNCTION:
        case NEW:
        case THIS:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case NUMERIC_LITERAL:
        case IDENTIFIER_NAME:
        case 57:
        case 61:
        case 64:{
          newExpression();
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void callExpression() throws ParseException {/*@bgen(jjtree) callExpression */
  ASTcallExpression jjtn000 = new ASTcallExpression(JJTCALLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      memberExpression();
      label_4:
      while (true) {
        if (jj_2_5(2147483647)) {
          ;
        } else {
          break label_4;
        }
        arguments();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void arguments() throws ParseException {/*@bgen(jjtree) arguments */
  ASTarguments jjtn000 = new ASTarguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(64);
      if (jj_2_6(1)) {
        argumentList();
      } else {
        ;
      }
      jj_consume_token(65);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void argumentList() throws ParseException {
    assignmentExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 59:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      jj_consume_token(59);
      assignmentExpression();
    }
}

  static final public void newExpression() throws ParseException {/*@bgen(jjtree) newExpression */
  ASTnewExpression jjtn000 = new ASTnewExpression(JJTNEWEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_6:
      while (true) {
        if (jj_2_7(2147483647)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(NEW);
      }
      memberExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void memberExpression() throws ParseException {/*@bgen(jjtree) memberExpression */
  ASTmemberExpression jjtn000 = new ASTmemberExpression(JJTMEMBEREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NEW:{
        jj_consume_token(NEW);
        memberExpression();
        arguments();
        break;
        }
      case FUNCTION:
      case THIS:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case NUMERIC_LITERAL:
      case IDENTIFIER_NAME:
      case 57:
      case 61:
      case 64:{
        primaryExpression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 57:{
          label_7:
          while (true) {
            jj_consume_token(57);
            expression();
            jj_consume_token(58);
            if (jj_2_8(2147483647)) {
              ;
            } else {
              break label_7;
            }
          }
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 66:{
              ;
              break;
              }
            default:
              jj_la1[11] = jj_gen;
              break label_8;
            }
            jj_consume_token(66);
            jj_consume_token(IDENTIFIER_NAME);
          }
        }
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void updateExpression() throws ParseException {/*@bgen(jjtree) updateExpression */
  ASTupdateExpression jjtn000 = new ASTupdateExpression(JJTUPDATEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 67:
      case 68:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 67:{
          jj_consume_token(67);
          break;
          }
        case 68:{
          jj_consume_token(68);
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        leftSideExpression();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        if (jj_2_9(2147483647)) {
          leftSideExpression();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 67:{
            jj_consume_token(67);
            break;
            }
          case 68:{
            jj_consume_token(68);
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else if (jj_2_10(1)) {
          leftSideExpression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void unaryExpression() throws ParseException {/*@bgen(jjtree) unaryExpression */
  ASTunaryExpression jjtn000 = new ASTunaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DELETE:
        case TYPEOF:
        case VOID:
        case 69:
        case 70:
        case 71:
        case 72:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DELETE:{
          jj_consume_token(DELETE);
          break;
          }
        case VOID:{
          jj_consume_token(VOID);
          break;
          }
        case TYPEOF:{
          jj_consume_token(TYPEOF);
          break;
          }
        case 69:{
          jj_consume_token(69);
          break;
          }
        case 70:{
          jj_consume_token(70);
          break;
          }
        case 71:{
          jj_consume_token(71);
          break;
          }
        case 72:{
          jj_consume_token(72);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      updateExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void exponentiationExpression() throws ParseException {/*@bgen(jjtree) exponentiationExpression */
  ASTexponentiationExpression jjtn000 = new ASTexponentiationExpression(JJTEXPONENTIATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      unaryExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 73:{
        jj_consume_token(73);
        unaryExpression();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void multiplicativeExpression() throws ParseException {/*@bgen(jjtree) multiplicativeExpression */
  ASTmultiplicativeExpression jjtn000 = new ASTmultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      exponentiationExpression();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 74:
        case 75:
        case 76:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 74:{
          jj_consume_token(74);
          break;
          }
        case 75:{
          jj_consume_token(75);
          break;
          }
        case 76:{
          jj_consume_token(76);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        exponentiationExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void additiveExpression() throws ParseException {/*@bgen(jjtree) additiveExpression */
  ASTadditiveExpression jjtn000 = new ASTadditiveExpression(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      multiplicativeExpression();
      label_11:
      while (true) {
        if (jj_2_11(2147483647)) {
          ;
        } else {
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 72:{
          jj_consume_token(72);
          break;
          }
        case 71:{
          jj_consume_token(71);
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        multiplicativeExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void shiftExpression() throws ParseException {/*@bgen(jjtree) shiftExpression */
  ASTshiftExpression jjtn000 = new ASTshiftExpression(JJTSHIFTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      additiveExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 77:
      case 78:
      case 79:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 77:{
          jj_consume_token(77);
          break;
          }
        case 78:{
          jj_consume_token(78);
          break;
          }
        case 79:{
          jj_consume_token(79);
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        shiftExpression();
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void relationalExpression() throws ParseException {/*@bgen(jjtree) relationalExpression */
  ASTrelationalExpression jjtn000 = new ASTrelationalExpression(JJTRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      shiftExpression();
      if (isRelationalOperator()) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 80:{
          jj_consume_token(80);
          break;
          }
        case 81:{
          jj_consume_token(81);
          break;
          }
        case 82:{
          jj_consume_token(82);
          break;
          }
        case 83:{
          jj_consume_token(83);
          break;
          }
        case INSTANCEOF:{
          jj_consume_token(INSTANCEOF);
          break;
          }
        case IN:{
          jj_consume_token(IN);
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        relationalExpression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void equalityExpression() throws ParseException {/*@bgen(jjtree) equalityExpression */
  ASTequalityExpression jjtn000 = new ASTequalityExpression(JJTEQUALITYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      relationalExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 84:
      case 85:
      case 86:
      case 87:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 84:{
          jj_consume_token(84);
          break;
          }
        case 85:{
          jj_consume_token(85);
          break;
          }
        case 86:{
          jj_consume_token(86);
          break;
          }
        case 87:{
          jj_consume_token(87);
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        equalityExpression();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void bitwiseAndExpression() throws ParseException {/*@bgen(jjtree) bitwiseAndExpression */
  ASTbitwiseAndExpression jjtn000 = new ASTbitwiseAndExpression(JJTBITWISEANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      equalityExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 88:{
        jj_consume_token(88);
        bitwiseAndExpression();
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void bitwiseXorExpression() throws ParseException {/*@bgen(jjtree) bitwiseXorExpression */
  ASTbitwiseXorExpression jjtn000 = new ASTbitwiseXorExpression(JJTBITWISEXOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      bitwiseAndExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 89:{
        jj_consume_token(89);
        bitwiseXorExpression();
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void bitwiseOrExpression() throws ParseException {/*@bgen(jjtree) bitwiseOrExpression */
  ASTbitwiseOrExpression jjtn000 = new ASTbitwiseOrExpression(JJTBITWISEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      bitwiseXorExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 90:{
        jj_consume_token(90);
        bitwiseOrExpression();
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void logicalAndExpression() throws ParseException {/*@bgen(jjtree) logicalAndExpression */
  ASTlogicalAndExpression jjtn000 = new ASTlogicalAndExpression(JJTLOGICALANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      bitwiseOrExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 91:{
        jj_consume_token(91);
        logicalAndExpression();
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void logicalOrExpression() throws ParseException {/*@bgen(jjtree) logicalOrExpression */
  ASTlogicalOrExpression jjtn000 = new ASTlogicalOrExpression(JJTLOGICALOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      logicalAndExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 92:{
        jj_consume_token(92);
        logicalOrExpression();
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void conditionalExpression() throws ParseException {/*@bgen(jjtree) conditionalExpression */
  ASTconditionalExpression jjtn000 = new ASTconditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      logicalOrExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 93:{
        jj_consume_token(93);
        assignmentExpression();
        jj_consume_token(63);
        assignmentExpression();
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void assignmentExpression() throws ParseException {/*@bgen(jjtree) assignmentExpression */
  ASTassignmentExpression jjtn000 = new ASTassignmentExpression(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_12(2147483647)) {
        leftSideExpression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 94:{
          jj_consume_token(94);
          break;
          }
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:{
          assignmentOperator();
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        assignmentExpression();
      } else if (jj_2_13(1)) {
        conditionalExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void assignmentOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 95:{
      jj_consume_token(95);
      break;
      }
    case 96:{
      jj_consume_token(96);
      break;
      }
    case 97:{
      jj_consume_token(97);
      break;
      }
    case 98:{
      jj_consume_token(98);
      break;
      }
    case 99:{
      jj_consume_token(99);
      break;
      }
    case 100:{
      jj_consume_token(100);
      break;
      }
    case 101:{
      jj_consume_token(101);
      break;
      }
    case 102:{
      jj_consume_token(102);
      break;
      }
    case 103:{
      jj_consume_token(103);
      break;
      }
    case 104:{
      jj_consume_token(104);
      break;
      }
    case 105:{
      jj_consume_token(105);
      break;
      }
    case 106:{
      jj_consume_token(106);
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void expression() throws ParseException {/*@bgen(jjtree) expression */
  ASTexpression jjtn000 = new ASTexpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      assignmentExpression();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 59:{
          ;
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          break label_12;
        }
        jj_consume_token(59);
        assignmentExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void statement() throws ParseException {/*@bgen(jjtree) statement */
  ASTstatement jjtn000 = new ASTstatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 107:{
        emptyStatement();
        break;
        }
      case VAR:{
        variableDefinition();
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        if (jj_2_14(2147483647)) {
          block();
        } else if (jj_2_15(2147483647)) {
          labeledStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:{
            ifStatement();
            break;
            }
          case SWITCH:{
            switchStatement();
            break;
            }
          case DO:{
            doStatement();
            break;
            }
          case WHILE:{
            whileStatement();
            break;
            }
          case FOR:{
            forStatement();
            break;
            }
          case CONTINUE:{
            continueStatement();
            break;
            }
          case BREAK:{
            breakStatement();
            break;
            }
          case RETURN:{
            returnStatement();
            break;
            }
          case THROW:{
            throwStatement();
            break;
            }
          case TRY:{
            tryStatement();
            break;
            }
          default:
            jj_la1[38] = jj_gen;
            if (jj_2_16(1)) {
              expressionStatement();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void emptyStatement() throws ParseException {/*@bgen(jjtree) emptyStatement */
  ASTemptyStatement jjtn000 = new ASTemptyStatement(JJTEMPTYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(107);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void expressionStatement() throws ParseException {/*@bgen(jjtree) expressionStatement */
  ASTexpressionStatement jjtn000 = new ASTexpressionStatement(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void variableDefinition() throws ParseException {/*@bgen(jjtree) variableDefinition */
  ASTvariableDefinition jjtn000 = new ASTvariableDefinition(JJTVARIABLEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(VAR);
      variableDeclarationList();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void variableDeclarationList() throws ParseException {/*@bgen(jjtree) variableDeclarationList */
  ASTvariableDeclarationList jjtn000 = new ASTvariableDeclarationList(JJTVARIABLEDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      variableDeclaration();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 59:{
          ;
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          break label_13;
        }
        jj_consume_token(59);
        variableDeclaration();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void variableDeclaration() throws ParseException {/*@bgen(jjtree) variableDeclaration */
  ASTvariableDeclaration jjtn000 = new ASTvariableDeclaration(JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IDENTIFIER_NAME);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 94:{
        jj_consume_token(94);
        assignmentExpression();
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void block() throws ParseException {/*@bgen(jjtree) block */
  ASTblock jjtn000 = new ASTblock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(61);
      label_14:
      while (true) {
        if (jj_2_17(1)) {
          ;
        } else {
          break label_14;
        }
        statement();
      }
      jj_consume_token(62);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void labeledStatement() throws ParseException {/*@bgen(jjtree) labeledStatement */
  ASTlabeledStatement jjtn000 = new ASTlabeledStatement(JJTLABELEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IDENTIFIER_NAME);
      jj_consume_token(63);
      if (getToken(1).image != "function") {
        statement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FUNCTION:{
          namedFunction();
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void ifStatement() throws ParseException {/*@bgen(jjtree) ifStatement */
  ASTifStatement jjtn000 = new ASTifStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IF);
      jj_consume_token(64);
      expression();
      jj_consume_token(65);
      statement();
      if (jj_2_18(2)) {
        jj_consume_token(ELSE);
        statement();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void switchStatement() throws ParseException {/*@bgen(jjtree) switchStatement */
  ASTswitchStatement jjtn000 = new ASTswitchStatement(JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(64);
      expression();
      jj_consume_token(65);
      caseBlock();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void caseBlock() throws ParseException {/*@bgen(jjtree) caseBlock */
  ASTcaseBlock jjtn000 = new ASTcaseBlock(JJTCASEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:{
        caseClauses();
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DFLT:{
        defaultClause();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASE:{
          caseClauses();
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      jj_consume_token(62);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void caseClauses() throws ParseException {/*@bgen(jjtree) caseClauses */
  ASTcaseClauses jjtn000 = new ASTcaseClauses(JJTCASECLAUSES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_15:
      while (true) {
        caseClause();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASE:{
          ;
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          break label_15;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void caseClause() throws ParseException {/*@bgen(jjtree) caseClause */
  ASTcaseClause jjtn000 = new ASTcaseClause(JJTCASECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CASE);
      expression();
      jj_consume_token(63);
      label_16:
      while (true) {
        if (jj_2_19(1)) {
          ;
        } else {
          break label_16;
        }
        statement();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void defaultClause() throws ParseException {/*@bgen(jjtree) defaultClause */
  ASTdefaultClause jjtn000 = new ASTdefaultClause(JJTDEFAULTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DFLT);
      jj_consume_token(63);
      label_17:
      while (true) {
        if (jj_2_20(1)) {
          ;
        } else {
          break label_17;
        }
        statement();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void doStatement() throws ParseException {/*@bgen(jjtree) doStatement */
  ASTdoStatement jjtn000 = new ASTdoStatement(JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DO);
      statement();
      jj_consume_token(WHILE);
      jj_consume_token(64);
      expression();
      jj_consume_token(65);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void whileStatement() throws ParseException {/*@bgen(jjtree) whileStatement */
  ASTwhileStatement jjtn000 = new ASTwhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(WHILE);
      jj_consume_token(64);
      expression();
      jj_consume_token(65);
      statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void forStatement() throws ParseException {/*@bgen(jjtree) forStatement */
  ASTforStatement jjtn000 = new ASTforStatement(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FOR);
      jj_consume_token(64);
      if (jj_2_21(2147483647)) {
        forHeader();
      } else if (jj_2_22(1)) {
        forInHeader();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(65);
      statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void forHeader() throws ParseException {/*@bgen(jjtree) forHeader */
  ASTforHeader jjtn000 = new ASTforHeader(JJTFORHEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_23(1)) {
        forInitializer();
      } else {
        ;
      }
      jj_consume_token(107);
      if (jj_2_24(1)) {
        expression();
      } else {
        ;
      }
      jj_consume_token(107);
      if (jj_2_25(1)) {
        expression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void forInitializer() throws ParseException {/*@bgen(jjtree) forInitializer */
  ASTforInitializer jjtn000 = new ASTforInitializer(JJTFORINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_26(1)) {
        expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:{
          variableDefinition();
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void forInHeader() throws ParseException {/*@bgen(jjtree) forInHeader */
  ASTforInHeader jjtn000 = new ASTforInHeader(JJTFORINHEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
forIn = true;
      forInBinding();
      jj_consume_token(IN);
forIn = false;
      expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void forInBinding() throws ParseException {/*@bgen(jjtree) forInBinding */
  ASTforInBinding jjtn000 = new ASTforInBinding(JJTFORINBINDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_27(1)) {
        leftSideExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:{
          jj_consume_token(VAR);
          variableDeclaration();
          break;
          }
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void continueStatement() throws ParseException {/*@bgen(jjtree) continueStatement */
  ASTcontinueStatement jjtn000 = new ASTcontinueStatement(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CONTINUE);
      if (jj_2_28(2)) {
        jj_consume_token(IDENTIFIER_NAME);
      } else {
        ;
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void breakStatement() throws ParseException {/*@bgen(jjtree) breakStatement */
  ASTbreakStatement jjtn000 = new ASTbreakStatement(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(BREAK);
      if (jj_2_29(2)) {
        jj_consume_token(IDENTIFIER_NAME);
      } else {
        ;
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void returnStatement() throws ParseException {/*@bgen(jjtree) returnStatement */
  ASTreturnStatement jjtn000 = new ASTreturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RETURN);
      if (jj_2_30(2)) {
        expression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void throwStatement() throws ParseException {/*@bgen(jjtree) throwStatement */
  ASTthrowStatement jjtn000 = new ASTthrowStatement(JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(THROW);
      expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void tryStatement() throws ParseException {/*@bgen(jjtree) tryStatement */
  ASTtryStatement jjtn000 = new ASTtryStatement(JJTTRYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TRY);
      block();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CATCH:{
        catchClauses();
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINALLY:{
        finallyClause();
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void catchClauses() throws ParseException {/*@bgen(jjtree) catchClauses */
  ASTcatchClauses jjtn000 = new ASTcatchClauses(JJTCATCHCLAUSES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_18:
      while (true) {
        catchClause();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CATCH:{
          ;
          break;
          }
        default:
          jj_la1[50] = jj_gen;
          break label_18;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void catchClause() throws ParseException {/*@bgen(jjtree) catchClause */
  ASTcatchClause jjtn000 = new ASTcatchClause(JJTCATCHCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CATCH);
      jj_consume_token(64);
      jj_consume_token(IDENTIFIER_NAME);
      jj_consume_token(65);
      block();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void finallyClause() throws ParseException {/*@bgen(jjtree) finallyClause */
  ASTfinallyClause jjtn000 = new ASTfinallyClause(JJTFINALLYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FINALLY);
      block();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void namedFunction() throws ParseException {/*@bgen(jjtree) namedFunction */
  ASTnamedFunction jjtn000 = new ASTnamedFunction(JJTNAMEDFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FUNCTION);
      jj_consume_token(IDENTIFIER_NAME);
      jj_consume_token(64);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER_NAME:{
        formalParameters();
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      jj_consume_token(65);
      jj_consume_token(61);
      if (jj_2_31(1)) {
        functionBody();
      } else {
        ;
      }
      jj_consume_token(62);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void anonymousFunction() throws ParseException {/*@bgen(jjtree) anonymousFunction */
  ASTanonymousFunction jjtn000 = new ASTanonymousFunction(JJTANONYMOUSFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FUNCTION);
      jj_consume_token(64);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER_NAME:{
        formalParameters();
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      jj_consume_token(65);
      jj_consume_token(61);
      if (jj_2_32(1)) {
        functionBody();
      } else {
        ;
      }
      jj_consume_token(62);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void formalParameters() throws ParseException {/*@bgen(jjtree) formalParameters */
  ASTformalParameters jjtn000 = new ASTformalParameters(JJTFORMALPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IDENTIFIER_NAME);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 59:{
          ;
          break;
          }
        default:
          jj_la1[53] = jj_gen;
          break label_19;
        }
        jj_consume_token(59);
        jj_consume_token(IDENTIFIER_NAME);
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void functionBody() throws ParseException {/*@bgen(jjtree) functionBody */
  ASTfunctionBody jjtn000 = new ASTfunctionBody(JJTFUNCTIONBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      topStatements();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void topStatement() throws ParseException {/*@bgen(jjtree) topStatement */
  ASTtopStatement jjtn000 = new ASTtopStatement(JJTTOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (getToken(1).image != "function") {
        statement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FUNCTION:{
          namedFunction();
          break;
          }
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void topStatements() throws ParseException {/*@bgen(jjtree) topStatements */
  ASTtopStatements jjtn000 = new ASTtopStatements(JJTTOPSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_20:
      while (true) {
        topStatement();
        if (jj_2_33(1)) {
          ;
        } else {
          break label_20;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public SimpleNode program() throws ParseException {/*@bgen(jjtree) program */
                        ASTprogram jjtn000 = new ASTprogram(JJTPROGRAM);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
                        jjtn000.jjtSetFirstToken(getToken(1));Token t = null;
    try {
      topStatements();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_3R_46()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_89()
 {
    if (jj_scan_token(93)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_93()
 {
    if (jj_scan_token(92)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_28()
 {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_12()
 {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  static private boolean jj_3R_99()
 {
    if (jj_scan_token(91)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_110()
 {
    if (jj_scan_token(90)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  static private boolean jj_3_13()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_40()
 {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    return false;
  }

  static private boolean jj_3R_106()
 {
    if (jj_scan_token(66)) return true;
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    return false;
  }

  static private boolean jj_3R_96()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_118()
 {
    if (jj_scan_token(89)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_31()
 {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_123()
 {
    if (jj_scan_token(88)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  static private boolean jj_3R_45()
 {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_128()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    }
    }
    }
    if (jj_3R_107()) return true;
    return false;
  }

  static private boolean jj_3_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    return false;
  }

  static private boolean jj_3R_68()
 {
    if (jj_3R_88()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_88()
 {
    if (jj_3R_92()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_135()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_141()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    if (jj_3R_134()) return true;
    return false;
  }

  static private boolean jj_3R_138()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    }
    if (jj_3R_122()) return true;
    return false;
  }

  static private boolean jj_3R_92()
 {
    if (jj_3R_97()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_144()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    }
    }
    if (jj_3R_137()) return true;
    return false;
  }

  static private boolean jj_3R_97()
 {
    if (jj_3R_107()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_107()
 {
    if (jj_3R_116()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_116()
 {
    if (jj_3R_122()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_147()
 {
    if (jj_scan_token(73)) return true;
    if (jj_3R_140()) return true;
    return false;
  }

  static private boolean jj_3R_43()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_122()
 {
    if (jj_3R_127()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_scan_token(57)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(58)) return true;
    return false;
  }

  static private boolean jj_3R_127()
 {
    if (jj_3R_134()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_141()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_134()
 {
    if (jj_3R_137()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_144()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_105()
 {
    if (jj_scan_token(57)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(58)) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    return false;
  }

  static private boolean jj_3R_95()
 {
    Token xsp;
    if (jj_3R_105()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_137()
 {
    if (jj_3R_140()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_142()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_140()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_142()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_143()) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_146()
 {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    return false;
  }

  static private boolean jj_3R_84()
 {
    if (jj_scan_token(59)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_145()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_143()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static private boolean jj_3R_91()
 {
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    return false;
  }

  static private boolean jj_3R_86()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    return false;
  }

  static private boolean jj_3R_87()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_90()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_67()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(25)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_86()) return true;
    return false;
  }

  static private boolean jj_3R_121()
 {
    if (jj_3R_126()) return true;
    return false;
  }

  static private boolean jj_3R_27()
 {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_84()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_scan_token(64)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    return false;
  }

  static private boolean jj_3R_66()
 {
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_64()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_42()
 {
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = !getToken(1).image.equals("new");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  static private boolean jj_3R_131()
 {
    if (jj_scan_token(59)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  static private boolean jj_3R_115()
 {
    if (jj_scan_token(64)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(65)) return true;
    return false;
  }

  static private boolean jj_3_31()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_39()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_114()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_130()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_124()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_120()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  static private boolean jj_3R_125()
 {
    if (jj_3R_130()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_131()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_32()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_129()
 {
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_113()
 {
    if (jj_scan_token(61)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(59)) jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    return false;
  }

  static private boolean jj_3R_65()
 {
    if (jj_scan_token(60)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_132()
 {
    if (jj_3R_136()) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_129()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_139()
 {
    if (jj_scan_token(59)) return true;
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    Token xsp;
    if (jj_scan_token(59)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(59)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_119()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_33()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_62()
 {
    Token xsp;
    if (jj_3_33()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_133()
 {
    if (jj_3R_136()) return true;
    return false;
  }

  static private boolean jj_3R_112()
 {
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) jj_scanpos = xsp;
    if (jj_scan_token(58)) return true;
    return false;
  }

  static private boolean jj_3R_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image != "function";
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    return false;
  }

  static private boolean jj_3R_63()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_111()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_37()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3R_104()
 {
    if (jj_3R_115()) return true;
    return false;
  }

  static private boolean jj_3R_103()
 {
    if (jj_3R_114()) return true;
    return false;
  }

  static private boolean jj_3R_102()
 {
    if (jj_3R_113()) return true;
    return false;
  }

  static private boolean jj_3R_136()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_139()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_101()
 {
    if (jj_3R_112()) return true;
    return false;
  }

  static private boolean jj_3R_100()
 {
    if (jj_3R_111()) return true;
    return false;
  }

  static private boolean jj_3R_153()
 {
    if (jj_3R_157()) return true;
    return false;
  }

  static private boolean jj_3R_94()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_126()
 {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(64)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    if (jj_scan_token(61)) return true;
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    if (jj_scan_token(64)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    if (jj_scan_token(61)) return true;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    return false;
  }

  static private boolean jj_3R_157()
 {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3R_152()
 {
    if (jj_3R_156()) return true;
    return false;
  }

  static private boolean jj_3R_163()
 {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(64)) return true;
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3R_161()
 {
    if (jj_3R_163()) return true;
    return false;
  }

  static private boolean jj_3R_156()
 {
    Token xsp;
    if (jj_3R_161()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_161()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_25()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_22()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_30()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_82()
 {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_71()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_81()
 {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_29()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    return false;
  }

  static private boolean jj_3R_149()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_28()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    return false;
  }

  static private boolean jj_3R_80()
 {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_79()
 {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_24()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_78()
 {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_61()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3R_83()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  static private boolean jj_3_21()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_27()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_60()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    return false;
  }

  static private boolean jj_3R_35()
 {
    if (jj_3R_60()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_151()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  static private boolean jj_3_26()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_160()
 {
    if (jj_3R_158()) return true;
    return false;
  }

  static private boolean jj_3_23()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_34()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    if (jj_scan_token(107)) return true;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    if (jj_scan_token(107)) return true;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_19()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_77()
 {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(64)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    if (jj_scan_token(65)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_18()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_20()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_76()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(64)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_155()
 {
    if (jj_3R_159()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_75()
 {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(64)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(65)) return true;
    return false;
  }

  static private boolean jj_3R_159()
 {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(63)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_164()
 {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(63)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_148()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_162()
 {
    if (jj_3R_164()) return true;
    return false;
  }

  static private boolean jj_3R_158()
 {
    Token xsp;
    if (jj_3R_162()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_162()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_154()
 {
    if (jj_3R_158()) return true;
    return false;
  }

  static private boolean jj_3R_150()
 {
    if (jj_scan_token(61)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    return false;
  }

  static private boolean jj_3R_74()
 {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(64)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_150()) return true;
    return false;
  }

  static private boolean jj_3R_85()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_117()
 {
    if (jj_scan_token(94)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_109()
 {
    if (jj_scan_token(59)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  static private boolean jj_3R_73()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(64)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_17()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_72()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    if (jj_scan_token(63)) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image != "function";
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    }
    return false;
  }

  static private boolean jj_3R_71()
 {
    if (jj_scan_token(61)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(62)) return true;
    return false;
  }

  static private boolean jj_3R_108()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_98()
 {
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_70()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_32()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_69()
 {
    if (jj_scan_token(107)) return true;
    return false;
  }

  static private boolean jj_3_16()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_15()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    if (jj_scan_token(63)) return true;
    return false;
  }

  static private boolean jj_3R_59()
 {
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_58()
 {
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3_14()
 {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static private boolean jj_3R_57()
 {
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_56()
 {
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3R_55()
 {
    if (jj_3R_78()) return true;
    return false;
  }

  static private boolean jj_3R_54()
 {
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3R_53()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3R_30()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_52()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_51()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3R_50()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3R_41()
 {
    if (jj_scan_token(59)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_49()
 {
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_48()
 {
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3R_47()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JavascriptTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[55];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x10200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x12200000,0x0,0x0,0x0,0x12200000,0x0,0x0,0x0,0x80010000,0x80010000,0x0,0x0,0x0,0x0,0x0,0x0,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6c524800,0x0,0x0,0x200000,0x1000,0x1000,0x8000,0x1000,0x0,0x0,0x2000,0x80000,0x2000,0x0,0x0,0x0,0x200000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x23000138,0x138,0x8000000,0x8000000,0x8000000,0x10000000,0x1000000,0x8000000,0x0,0x23000138,0x8000000,0x0,0x2000000,0x23000138,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x1,0x4,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x1000000,0x1000000,0x8000000,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x4,0x0,0x1,0x18,0x18,0x18,0x1e0,0x1e0,0x200,0x1c00,0x1c00,0x180,0xe000,0xe000,0xf0000,0xf00000,0xf00000,0x1000000,0x2000000,0x4000000,0x8000000,0x10000000,0x20000000,0xc0000000,0x80000000,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7ff,0x7ff,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[33];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Javascript(InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Javascript(InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new JavascriptTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 55; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 55; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Javascript(Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new JavascriptTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 55; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new JavascriptTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 55; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Javascript(JavascriptTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 55; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavascriptTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 55; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = jj_lookingAhead ? jj_scanpos : token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[108];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 55; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 108; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 33; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			   case 23: jj_3_24(); break;
			   case 24: jj_3_25(); break;
			   case 25: jj_3_26(); break;
			   case 26: jj_3_27(); break;
			   case 27: jj_3_28(); break;
			   case 28: jj_3_29(); break;
			   case 29: jj_3_30(); break;
			   case 30: jj_3_31(); break;
			   case 31: jj_3_32(); break;
			   case 32: jj_3_33(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
