/* JavascriptTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. JavascriptTokenManager.java */
package javascriptInterpreter.parser;
import javascriptInterpreter.tree.*;
import java.io.*;
import javascriptInterpreter.visitors.*;

/** Token Manager. */
public class JavascriptTokenManager implements JavascriptConstants {

  /** Debug output. */
  public static  PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xb06000800L) != 0L)
         {
            jjmatchedKind = 56;
            return 57;
         }
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 56;
            return 26;
         }
         if ((active0 & 0xf0000000L) != 0L)
         {
            jjmatchedKind = 56;
            return 35;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 56;
            return 22;
         }
         if ((active0 & 0x7000L) != 0L)
         {
            jjmatchedKind = 56;
            return 74;
         }
         if ((active0 & 0x1c00000L) != 0L)
         {
            jjmatchedKind = 56;
            return 18;
         }
         if ((active0 & 0x38000L) != 0L)
         {
            jjmatchedKind = 56;
            return 13;
         }
         if ((active0 & 0x40400L) != 0L)
         {
            jjmatchedKind = 56;
            return 82;
         }
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x4L) != 0L)
            return 52;
         if ((active0 & 0x380000L) != 0L)
         {
            jjmatchedKind = 56;
            return 39;
         }
         return -1;
      case 1:
         if ((active0 & 0xfbe3c3c00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 1;
            }
            return 57;
         }
         if ((active0 & 0x1c20000L) != 0L)
            return 57;
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 1;
            }
            return 34;
         }
         if ((active0 & 0x18000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 1;
            }
            return 12;
         }
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 1;
            }
            return 76;
         }
         return -1;
      case 2:
         if ((active0 & 0x142100000L) != 0L)
            return 57;
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 2;
            }
            return 75;
         }
         if ((active0 & 0xebd2dbc00L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 2;
            }
            return 57;
         }
         return -1;
      case 3:
         if ((active0 & 0xa10041400L) != 0L)
            return 57;
         if ((active0 & 0x4ad29e800L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 3;
            return 57;
         }
         return -1;
      case 4:
         if ((active0 & 0x8d29c000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
            return 57;
         }
         if ((active0 & 0x420002800L) != 0L)
            return 57;
         return -1;
      case 5:
         if ((active0 & 0x128c000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
            return 57;
         }
         if ((active0 & 0x8c010000L) != 0L)
            return 57;
         return -1;
      case 6:
         if ((active0 & 0x88000L) != 0L)
            return 57;
         if ((active0 & 0x1204000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 6;
            return 57;
         }
         return -1;
      case 7:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 7;
            return 57;
         }
         if ((active0 & 0x204000L) != 0L)
            return 57;
         return -1;
      case 8:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 8;
            return 57;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa00000L);
      case 37:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
      case 38:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8008000000L);
      case 40:
         return jjStopAtPos(0, 64);
      case 41:
         return jjStopAtPos(0, 65);
      case 42:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40080000200L);
      case 43:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000008L);
      case 44:
         return jjStopAtPos(0, 59);
      case 45:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000010L);
      case 46:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 47:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_0(0x6L, 0x100000000L);
      case 58:
         return jjStopAtPos(0, 63);
      case 59:
         return jjStopAtPos(0, 107);
      case 60:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000042000L);
      case 61:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x500000L);
      case 62:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600008c000L);
      case 63:
         return jjStopAtPos(0, 93);
      case 91:
         return jjStopAtPos(0, 57);
      case 93:
         return jjStopAtPos(0, 58);
      case 94:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x38000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x40400L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x380000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1c00000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x802000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xf0000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x300000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 61);
      case 124:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20010000000L);
      case 125:
         return jjStopAtPos(0, 62);
      case 126:
         return jjStopAtPos(0, 69);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      case 42:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(1, 1);
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000000L);
      case 43:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 45:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 47:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      case 60:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000L);
      case 61:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc00000L);
      case 62:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x6000008000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100003000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x6018000L, active1, 0L);
      case 102:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 57);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x430000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L);
      case 110:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000400L, active1, 0L);
      case 111:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 17, 57);
         return jjMoveStringLiteralDfa2_0(active0, 0x200104000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000800L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800200000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 124:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(2, 60);
         break;
      case 61:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(2, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(2, 87);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 100);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 101);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 106);
         break;
      case 62:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x618000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x800010000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x284000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 57);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 57);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1041000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x4002000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0L);
      case 119:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 57);
         break;
      case 121:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 57);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(3, 102);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x88800L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x202000L, active1, 0L);
      case 100:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 57);
         break;
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 57);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 57);
         return jjMoveStringLiteralDfa4_0(active0, 0x80010000L, active1, 0L);
      case 108:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 57);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L);
      case 109:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 57);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 57);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x9004000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 57);
         break;
      case 104:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 57);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 107:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 57);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x210000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 119:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 57);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 57);
         break;
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 57);
         break;
      case 104:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 57);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x88000L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 57);
         return jjMoveStringLiteralDfa6_0(active0, 0x1004000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 57);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 121:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 57);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 14, 57);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 57);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 24, 57);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 88;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 82:
               case 57:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(57); }
                  break;
               case 18:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(57); }
                  break;
               case 34:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(57); }
                  break;
               case 75:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(57); }
                  break;
               case 39:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(57); }
                  break;
               case 12:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(57); }
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAddStates(0, 3); }
                  }
                  else if ((0x100001200L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAddStates(4, 8); }
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(57); }
                  }
                  else if (curChar == 46)
                     { jjCheckNAdd(52); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(9, 11); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 76:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(57); }
                  break;
               case 26:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(57); }
                  break;
               case 35:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(57); }
                  break;
               case 74:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(57); }
                  break;
               case 13:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(57); }
                  break;
               case 22:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(57); }
                  break;
               case 1:
                  if ((0x2400L & l) != 0L)
                     kind = 8;
                  break;
               case 41:
               case 43:
                  if (curChar == 34)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 44:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 45:
                  if (curChar == 34 && kind > 37)
                     kind = 37;
                  break;
               case 46:
               case 48:
                  if (curChar == 39)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 49:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 50:
                  if (curChar == 39 && kind > 37)
                     kind = 37;
                  break;
               case 51:
                  if (curChar == 46)
                     { jjCheckNAdd(52); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(52, 53); }
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(55); }
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAdd(55); }
                  break;
               case 56:
                  if (curChar != 36)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(57); }
                  break;
               case 58:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(0, 3); }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(59, 60); }
                  break;
               case 60:
                  if (curChar != 46)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(61, 53); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(61, 53); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(62, 53); }
                  break;
               case 63:
                  if (curChar != 48)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(4, 8); }
                  break;
               case 65:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if ((0x1ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjstateSet[jjnewStateCnt++] = 69;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 82:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(57); }
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 86;
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(57); }
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(57); }
                  }
                  if (curChar == 117)
                     { jjCheckNAdd(33); }
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(57); }
                  }
                  if (curChar == 115)
                     { jjCheckNAdd(2); }
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(57); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(57); }
                  }
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(57); }
                  }
                  if (curChar == 101)
                     { jjAddStates(15, 16); }
                  else if (curChar == 99)
                     { jjAddStates(17, 18); }
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 76:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(57); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(57); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(57); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 74:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(57); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 76;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(57); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(57); }
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 2:
                  if (curChar == 116 && kind > 9)
                     kind = 9;
                  break;
               case 3:
                  if (curChar == 105)
                     { jjCheckNAdd(2); }
                  break;
               case 4:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 114 && kind > 9)
                     kind = 9;
                  break;
               case 8:
               case 20:
                  if (curChar == 101)
                     { jjCheckNAdd(7); }
                  break;
               case 9:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 14:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
               case 79:
                  if (curChar == 114)
                     { jjCheckNAdd(2); }
                  break;
               case 16:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 21:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 23:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 104 && kind > 9)
                     kind = 9;
                  break;
               case 25:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 27:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 100 && kind > 9)
                     kind = 9;
                  break;
               case 29:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 101 && kind > 36)
                     kind = 36;
                  break;
               case 36:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 115)
                     { jjCheckNAdd(33); }
                  break;
               case 38:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 40:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 42:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 44:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 47:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 49:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(19, 20); }
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(57); }
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(57); }
                  break;
               case 64:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 66:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 68:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 69:
                  if ((0x7eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAdd(69); }
                  break;
               case 70:
                  if (curChar == 99)
                     { jjAddStates(17, 18); }
                  break;
               case 71:
                  if (curChar == 115 && kind > 9)
                     kind = 9;
                  break;
               case 72:
                  if (curChar == 115)
                     { jjCheckNAdd(71); }
                  break;
               case 73:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 77:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 101)
                     { jjAddStates(15, 16); }
                  break;
               case 80:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 83:
                  if (curChar == 100)
                     { jjCheckNAdd(71); }
                  break;
               case 84:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 44:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(12, 14); }
                  break;
               case 49:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(9, 11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 88 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x10L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      default :
         return 2;
   }
   return 2;
}
static private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
static private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  break;
               case 1:
                  if ((0x2400L & l) != 0L)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 5)
                     kind = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\145\156\165\155", 
"\142\162\145\141\153", "\143\141\163\145", "\143\141\164\143\150", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\145\154\145\164\145", "\144\157", 
"\145\154\163\145", "\146\151\156\141\154\154\171", "\146\157\162", 
"\146\165\156\143\164\151\157\156", "\151\146", "\151\156", "\151\156\163\164\141\156\143\145\157\146", 
"\156\145\167", "\162\145\164\165\162\156", "\163\167\151\164\143\150", "\164\150\151\163", 
"\164\150\162\157\167", "\164\162\171", "\164\171\160\145\157\146", "\166\141\162", 
"\166\157\151\144", "\167\150\151\154\145", "\156\165\154\154", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\133", "\135", "\54", "\56\56\56", "\173", "\175", "\72", "\50", "\51", 
"\56", "\53\53", "\55\55", "\176", "\41", "\55", "\53", "\52\52", "\52", "\57", 
"\45", "\74\74", "\76\76", "\76\76\76", "\74", "\76", "\74\75", "\76\75", "\75\75", 
"\41\75", "\75\75\75", "\41\75\75", "\46", "\136", "\174", "\46\46", "\174\174", "\77", 
"\75", "\52\75", "\57\75", "\53\75", "\55\75", "\45\75", "\74\74\75", "\76\76\75", 
"\76\76\76\75", "\46\75", "\136\75", "\174\75", "\52\52\75", "\73", };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   59, 60, 62, 53, 60, 53, 64, 66, 68, 47, 49, 50, 42, 44, 45, 82, 
   87, 74, 77, 54, 55, 
};

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 3)
         {
            jjmatchedKind = 3;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public JavascriptTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public JavascriptTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 88; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public static void SwitchTo(int lexState)
  {
    if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_MULTI_LINE_COMMENT",
   "IN_SINGLE_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, 1, 2, -1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xff00013ffffffe01L, 0xfffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1d0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x50L, 0x0L, 
};
static final long[] jjtoMore = {
   0x2eL, 0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[88];
    static private final int[] jjstateSet = new int[2 * 88];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected int curChar;
}
